#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers

#define MAC 4
#define MAC_CODE 5
#define MAC_NUM 6
#define MAC_FUNC 7
#define WIN 0
#define WIN_CODE 1
#define WIN_NUM 2
#define WIN_FUNC 3

// Behavior Overrides

&lt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
};

/ {
    //combos {
    //  compatible = "zmk,combos";
    //combo_tab {
    //  timeout-ms = <20>;
    //  key-positions = <1 2>;
    //  bindings = <&kp TAB>;
    //};
    //  combo_enter {
    //    timeout-ms = <20>;
    //  key-positions = <13 14>;
    //bindings = <&kp ENTER>;
    //};
    //};

    macros {
        // Emoji

        test: test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp S &kp A &kp L &kp U &kp T &kp SPACE &kp C &kp E &kp C &kp I &kp SPACE &kp E &kp S &kp T &kp SPACE &kp U &kp N &kp SPACE &kp T &kp E &kp S &kp T &kp EXCL>;
            label = "TEST";
        };

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        bm: bottom_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "BOTTOM_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cm: code_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            retro-tap;
        };

        sm: space_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_MOD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        windows_default_layer {
            bindings = <
&none  &kp Q             &kp W  &kp E           &kp R             &kp T          &kp Y        &kp U   &kp I                &kp O    &kp P                      &none
&none  &mt LEFT_SHIFT A  &kp S  &kp D           &lt 5 F           &kp G          &kp H        &kp J   &kp K                &kp L    &mt RIGHT_SHIFT SEMICOLON  &none
&none  &kp Z             &kp X  &kp C           &kp V             &kp B          &kp N        &kp M   &kp COMMA            &kp DOT  &kp FSLH                   &none
                                &lm 4 LEFT_WIN  &kp LEFT_CONTROL  &lt 1 SPACE    &lt 2 ENTER  &kp F2  &mt LEFT_ALT ESCAPE
            >;
        };

        vim {
            bindings = <
&none  &kp ESCAPE     &kp LC(RIGHT)  &trans         &kp LC(R)       &trans          &kp K_COPY      &trans         &trans        &trans     &kp K_PASTE  &none
&none  &trans         &kp LC(S)      &trans         &trans          &trans          &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &trans       &none
&none  &kp C_AC_UNDO  &kp C_AC_CUT   &kp C_AC_COPY  &kp C_AC_PASTE  &kp LC(LEFT)    &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &trans       &none
                                     &trans         &trans          &trans          &trans          &trans         &trans
            >;
        };

        prog {
            bindings = <
&none  &kp RA(NUMBER_2)  &kp LESS_THAN     &kp LS(POUND)  &kp PLUS   &kp AMPS            &kp RA(LEFT_BRACKET)  &kp BACKSLASH         &kp PIPE               &kp EQUAL  &mo 3         &none
&none  &kp EXCL          &kp RS(NUMBER_2)  &kp TILDE      &kp MINUS  &kp DOLLAR          &kp RA(RBKT)          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI   &kp COLON     &none
&none  &kp STAR          &kp APOS          &kp RA(GRAVE)  &kp UNDER  &kp RS(NUMBER_6)    &kp PERCENT           &kp RA(SINGLE_QUOTE)  &kp RA(BACKSLASH)      &kp GRAVE  &kp RA(SEMI)  &none
                                           &trans         &trans     &trans              &trans                &trans                &trans
            >;
        };

        num {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none
&none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
&none  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        i3 {
            bindings = <
&none  &kp LS(Q)  &trans  &trans  &trans  &trans    &trans    &kp TAB   &trans  &trans     &trans  &none
&none  &trans     &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &none
&none  &trans     &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans  &none
                          &trans  &trans  &trans    &trans    &trans    &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &bt BT_CLR  &trans
&trans  &kp TAB  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &bt BT_NXT  &trans
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans      &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
